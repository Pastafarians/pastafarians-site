(function(){
  angular
    .module('linguine', [
      'flash',
      'ui.router',
      'ui.bootstrap',
      'linguine.corpora',
      'linguine.analysis'
      ])
    .config(config);

  function config($stateProvider, $locationProvider, $urlRouterProvider){
    $locationProvider.html5Mode(true);
    $urlRouterProvider.otherwise('/');

    $stateProvider
      .state('linguine', {
        url: '',
        abstract: true,
        template: '<div ui-view />'
      })
      .state('linguine.index', {
        url: '/',
        templateUrl: '/templates/home/index',
        controller: 'IndexController'
      });
  }
  config.$inject = ["$stateProvider", "$locationProvider", "$urlRouterProvider"];
})();

(function(){

  angular
    .module('linguine.corpora', ['ui.router', 'angularFileUpload'])
    .config(config);

  function config($stateProvider){
    $stateProvider
      .state('linguine.corpora', {
        url: '/corpora',
        abstract: true,
        template: '<div ui-view />'
      })
      .state('linguine.corpora.index', {
        url: '',
        templateUrl: '/templates/corpora/index',
        controller: 'CorporaIndexController',
        resolve: {
          loggedIn: ["loggedIn", function(loggedIn) {
            loggedIn.loggedIn();
          }]
       }
      })
      .state('linguine.corpora.new', {
        url: '/new',
        templateUrl: '/templates/corpora/new',
        controller: 'CorporaNewController',
        resolve: {
          loggedIn: ["loggedIn", function(loggedIn) {
            loggedIn.loggedIn();
          }]
       }
      })
      .state('linguine.corpora.show', {
        url: '/:id',
        templateUrl: '/templates/corpora/show',
        controller: 'CorporaShowController',
        resolve: {
          loggedIn: ["loggedIn", function(loggedIn) {
            loggedIn.loggedIn();
          }]
       }
      });
  }
  config.$inject = ["$stateProvider"];
})();

(function(){

  angular
    .module('linguine.analysis', ['ui.router'])
    .config(config);

  function config($stateProvider){
    $stateProvider
      .state('linguine.analysis', {
        url: '/analysis',
        abstract: true,
        template: '<div ui-view />'
      })
      .state('linguine.analysis.index', {
        url: '',
        templateUrl: '/templates/analysis/index',
        controller: 'AnalysisIndexController',
        resolve: {
          loggedIn: ["loggedIn", function(loggedIn) {
            loggedIn.loggedIn();
          }]
       }
      })
      .state('linguine.analysis.new', {
        url: '/new',
        templateUrl: '/templates/analysis/new',
        controller: 'AnalysisNewController',
        resolve: {
          loggedIn: ["loggedIn", function(loggedIn) {
            loggedIn.loggedIn();
          }]
       }
      })
      .state('linguine.analysis.show', {
        url: '/:id',
        templateUrl: '/templates/analysis/show',
        controller: 'AnalysisShowController',
        resolve: {
          loggedIn: ["loggedIn", function(loggedIn) {
            loggedIn.loggedIn();
          }]
       }
      });
  }
  config.$inject = ["$stateProvider"];
})();

(function(){

  angular
    .module('linguine')
    .controller('IndexController', IndexController);

  function IndexController ($scope) {

    var diameter = 100,
    format = d3.format(",d"),
    color = d3.scale.category20c();

    var bubble = d3.layout.pack()
        .sort(null)
        .size([diameter, diameter])
        .padding(1.5);

    var svg = d3.select("#graph").append("svg")
        .attr("class", "bubble")
        .attr("viewBox", "0 0 100 100");

    var root = {"name": "foo",
                "children": [
                  {
                    name: "the",
                    size: "20"
                  }, {
                    name: "quick",
                    size: "30"
                  }, {
                    name: "brown",
                    size: "10"
                  }, {
                    name: "fox",
                    size: "40"
                  }, {
                    name: "jumps",
                    size: "50"
                  }, {
                    name: "over",
                    size: "20"
                  }, {
                    name: "lazy",
                    size: "30"
                  }, {
                    name: "dog",
                    size: "10"
                  }
               ]};

    var node = svg.selectAll(".node")
        .data(bubble.nodes(classes(root))
        .filter(function(d) { return !d.children; }))
      .enter().append("g")
        .attr("class", "node")
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

    node.append("title")
        .text(function(d) { return d.className + ": " + format(d.value); });

    node.append("circle")
        .attr("r", function(d) { return d.r; })
        // Should really do this:
        // .style("fill", function(d) { return color(d.packageName); });
        .style("fill", "#F36E21");

    node.append("text")
        .attr("dy", ".3em")
        .style("text-anchor", "middle")
        .attr("fill", "white")
        .attr("font-size", function (d) {
          return ((0.2 * d.className.length) + (0.5 * d.r)) + "px";
        })
        .text(function(d) { return d.className; });

    // Returns a flattened hierarchy containing all leaf nodes under the root.
    function classes(root) {
      var classes = [];

      function recurse(name, node) {
        if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
        else classes.push({packageName: name, className: node.name, value: node.size});
      }

      recurse(null, root);
      return {children: classes};
    }

    d3.select(self.frameElement).style("height", diameter + "px");

  }
  IndexController.$inject = ["$scope"];
})();

(function(){

  angular
    .module('linguine.analysis')
    .controller('AnalysisIndexController', AnalysisIndexController);

  function AnalysisIndexController ($scope, $http) {

    $http.get('/api/corpora')
      .success(function (data) {
        $scope.corpora = data;
      });
    $http.get('/api/analysis')
      .success(function (data) {
        $scope.analyses = data;
      });

    $scope.findCorpus = function (id) {
      return _.find($scope.corpora, {'_id': id});
    }

  }
  AnalysisIndexController.$inject = ["$scope", "$http"];
})();

(function(){

  angular
    .module('linguine.analysis')
    .controller('AnalysisNewController', AnalysisNewController);

  function AnalysisNewController($http, $scope, $state) {

    $scope.analysisTypes = [
      {
        name: "Part of Speech Tagging",
        unfriendly_name: "pos_tag",
        description: "Uses the TextBlob tagger to generate Part-of-Speech tags for text."
      },
      {
        name: "Sentence Tokenizer",
        unfriendly_name: "sentence_tokenize",
        description: "Uses the NLTK sentence tokenizer to break a corpus up into sentences."
      },
      // {
      //   name: "Sentiment Analysis",
      //   unfriendly_name: "sentiment_analysis",
      //   description: "Uses the Stanford CoreNLP library to analyze a corpus and visualize the positivity or negativity of the text."
      // },
      {
        name: "Term Frequency - Inverse Document Frequency",
        unfriendly_name: "tfidf",
        description: "Uses the NLTK Punkt tokenizer to separate terms. Best applied to a large set of corpora. Useful for finding the most important words in the collection of words."
      },
      {
        name: "Topic Modeling",
        unfriendly_name: "topic_model",
        description: "Uses Gensim to detect and group the similar topics in a set of corpora."
      },
      {
        name: "Word Cloud Generator",
        unfriendly_name: "wordcloudop",
        description: "This operation is identical to TF-IDF when applied to a single corpus. Uses the NLTK Punkt tokenizer to separate terms. Used for finding the most frequent words a single corpus."
      }
    ];

    $scope.cleanupTypes = [
      {
        name: "Lemmatize",
        unfriendly_name: "lemmatize_wordnet",
        description: "Convert words to their lemmas using the NLTK WordNet Lemmatizer. E.g: Walk, walking, and walked will be converted to walk, and better and good would both be converted to good."
      },
      {
        name: "Remove Capitalization (greedy)",
        unfriendly_name: "removecapsgreedy",
        description: "Convert all uppercase letters to lowercase letters."
      },
      {
        name: "Remove Capitalization (NNP)",
        unfriendly_name: "removecapsnnp",
        description: "Convert uppercase letters to lowercase letters while leaving proper nouns capitalized, using TextBlob's Part-of-Speech tagger to identify proper nouns."
      },
      {
        name: "Stem (Porter)",
        unfriendly_name: "stem_porter",
        description: "Stem words using the NLTK Porter Stemmer. Converts inflected words in the corpus to their base form. This is a good general purpose stemmer to use."
      },
      {
        name: "Stem (Lancaster)",
        unfriendly_name: "stem_lancaster",
        description: "Stem words using the NLTK Lancaster Stemmer. Converts inflected words in the corpus to their base form."
      },
      {
        name: "Stem (Snowball)",
        unfriendly_name: "stem_snowball",
        description: "Stem words using the NLTK Snowball Stemmer. Converts inflected words in the corpus to their base form."
      },
      {
        name: "Remove Punctuation",
        unfriendly_name: "removepunct",
        description: "Remove all punctuation, using NLTK's Regexp tokenizer to scan the text for patterns of punctuation marks."
      }
    ];
    $scope.tokenizerTypes = [
      {
        name: "Word Tokenize (Penn Treebank)",
        unfriendly_name: "word_tokenize_treebank",
        description: "Separates the text in each corpus into individual word tokens, using NLTK's Penn Treebank tokenizer. This is a good general purpose tokenizer to use."
      },
      {
        name: "Word Tokenize (Whitespace and Punctuation)",
        unfriendly_name: "word_tokenize_whitespace_punct",
        description: "Separates the text in each corpus into individual word tokens, splitting on whitespace and punctuation marks."
      },
      // {
      //   name: "Word Tokenize (Stanford)",
      //   unfriendly_name: "word_tokenize_stanford",
      //   description: "Separates the text in each corpus into individual word tokens, using NLTK's Stanford tokenizer."
      // },
      {
        name: "Word Tokenize (Spaces)",
        unfriendly_name: "word_tokenize_spaces",
        description: "Separates the text in each corpus into individual word tokens, splitting on spaces."
      },
      {
        name: "Word Tokenize (Tabs)",
        unfriendly_name: "word_tokenize_tabs",
        description: "Separates the text in each corpus into individual word tokens, splitting on tabs."
      },
    ]
    $http.get('/api/corpora')
      .success(function (data) {
        $scope.corpora = data;
      });

    $scope.onCorpusClick = function (e) {
      e.corpus.active = !e.corpus.active;
    };

    $scope.onAnalysisClick = function (e) {
      $scope.selectedAnalysis = e.analysis;
    };

    $scope.onCleanupClick = function(e) {
      e.cleanup.active = !e.cleanup.active
    };
    $scope.onTokenizerClick = function(e) {
      $scope.selectedTokenizer = e.tokenizer;
    }
    $scope.onCreateAnalysis = function () {
      var payload = {
        corpora_ids: _.pluck(_.where($scope.corpora, 'active'), '_id'),
        cleanup: _.map(_.where($scope.cleanupTypes, 'active'), function(cleanupType) {return cleanupType.unfriendly_name}),
        operation: $scope.selectedAnalysis.unfriendly_name,
        tokenizer: $scope.selectedTokenizer.unfriendly_name,
        library: "",
        transaction_id: "",
        user_id: ""
      };
      $http.post('/api/analysis', payload)
        .success(function(data) {
          $state.go('linguine.analysis.index');
        })
        .error(function (data) {
          // to-do: handle error case
        });
    };

  }
  AnalysisNewController.$inject = ["$http", "$scope", "$state"];
})();

     (function(){

  angular
    .module('linguine.analysis')
    .controller('AnalysisShowController', AnalysisShowController);

  function AnalysisShowController ($http, $scope, $state, $stateParams, $window) {

    $scope.back = function () {
      $window.history.back();
    };

    $http.get('/api/analysis/' + $stateParams.id)
      .success(function (data) {
        $scope.analysis = data;
        $scope.defaultView();
        $scope.visualize();
      })

    $http.get('/api/corpora')
      .success(function (data) {
        $scope.corpora = data;
      });

    $scope.delete = function () {
      $http.delete('/api/analysis/' + $stateParams.id)
        .success(function (data) {
          $state.go('linguine.analysis.index')
        })
        .error(function (data) {
          flash.danger.setMessage("An error occured.");
        })
    };

    $scope.findCorpus = function (id) {
      return _.find($scope.corpora, {'_id': id});
    }

    $scope.defaultView = function() {
      $scope.results = $scope.analysis.result;
    }

    $scope.visualizeTfidf = function() {
          var diameter = 100,
          format = d3.format(".3"),
          color = d3.scale.category20c()
          shift = 0.1;

      var bubble = d3.layout.pack().sort(null).size([diameter, diameter]).padding(1.5),
          svg = d3.select("#graph").append("svg").attr("class", "bubble").attr("viewBox", "0 0 100 100");

      var node = svg.selectAll(".node")
          .data(bubble.nodes(classes())
          .filter(function(d) { return !d.children; }))
        .enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

      node.append("title")
          .text(function(d) { return d.className + ": " + format(d.value - shift); });

      node.append("circle")
          .attr("r", function(d) { return d.r; })
          // Should really do this:
          // .style("fill", function(d) { return color(d.packageName); });
          .style("fill", "#F36E21");

      node.append("text")
          .attr("dy", ".3em")
          .style("text-anchor", "middle")
          .attr("fill", "white")
          .attr("font-size", function (d) {
            return ((0.2 * d.className.length) + (0.5 * d.r)) + "px";
          })
          .text(function(d) { return d.className; });

      // Returns a flattened hierarchy containing all leaf nodes under the root.
      function classes() {
        var classes = [];
        $scope.analysis.result.forEach(function (node) {
          var scalar;
          scalar = Math.log(Math.abs(node.importance))*-1;

          classes.push({packageName: "", className: node.term, value: scalar + shift});
        });
        return {children: classes};
      }

      d3.select(self.frameElement).style("height", diameter + "px");
    }

    $scope.visualizeWordcloud = function() {
      var diameter = 100,
          format = d3.format(".3"),
          color = d3.scale.category20c()
          shift = 0.1;

      var bubble = d3.layout.pack().sort(null).size([diameter, diameter]).padding(1.5),
          svg = d3.select("#graph").append("svg").attr("class", "bubble").attr("viewBox", "0 0 100 100");

      var node = svg.selectAll(".node")
          .data(bubble.nodes(classes())
          .filter(function(d) { return !d.children; }))
        .enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

      node.append("title")
          .text(function(d) { return d.className + ": " + format(d.value - shift); });

      node.append("circle")
          .attr("r", function(d) { return d.r; })
          // Should really do this:
          // .style("fill", function(d) { return color(d.packageName); });
          .style("fill", "#F36E21");

      node.append("text")
          .attr("dy", ".3em")
          .style("text-anchor", "middle")
          .attr("fill", "white")
          .attr("font-size", function (d) {
            return ((0.2 * d.className.length) + (0.5 * d.r)) + "px";
          })
          .text(function(d) { return d.className; });

      // Returns a flattened hierarchy containing all leaf nodes under the root.
      function classes() {
        var classes = [];
        $scope.analysis.result.forEach(function (node) {
          var scalar;

          if ($scope.analysis.analysis == "wordcloudop") {
            scalar = node.frequency;
          }
          classes.push({packageName: "", className: node.term, value: scalar + shift});
        });
        return {children: classes};
      }

      d3.select(self.frameElement).style("height", diameter + "px");
    }

    $scope.visualize = function () {
      if ($scope.analysis.analysis === "tfidf" ) {
        $scope.visualizeTfidf();
      } else if  ($scope.analysis.analysis == "wordcloudop") {
        $scope.visualizeWordcloud();
      }
    }


  }
  AnalysisShowController.$inject = ["$http", "$scope", "$state", "$stateParams", "$window"];
})();

/**!
 * @license angular-flash-pure v0.1.0
 * Copyright (c) 2014 Kristen Mills.
 * License: MIT
 */
(function() {
  angular.module('flash', []).factory("flash", ["$rootScope", function($rootScope) {
    var currentMessages, queues;
    queues = {
      info: [],
      success: [],
      warning: [],
      danger: []
    };
    currentMessages = {
      info: '',
      success: '',
      warning: '',
      danger: ''
    };
    $rootScope.$on("$locationChangeStart", function() {
      currentMessages.info = queues.info.shift() || "";
      currentMessages.success = queues.success.shift() || "";
      currentMessages.warning = queues.warning.shift() || "";
      return currentMessages.danger = queues.danger.shift() || "";
    });
    $rootScope.$on("event:angularFlash", function() {
      currentMessages.info = queues.info.shift() || "";
      currentMessages.success = queues.success.shift() || "";
      currentMessages.warning = queues.warning.shift() || "";
      return currentMessages.danger = queues.danger.shift() || "";
    });
    return {
      info: {
        setMessage: function(message) {
          return queues.info.push(message);
        },
        getMessage: function() {
          return currentMessages.info;
        }
      },
      success: {
        setMessage: function(message) {
          return queues.success.push(message);
        },
        getMessage: function() {
          return currentMessages.success;
        }
      },
      warning: {
        setMessage: function(message) {
          return queues.warning.push(message);
        },
        getMessage: function() {
          return currentMessages.warning;
        }
      },
      danger: {
        setMessage: function(message) {
          return queues.danger.push(message);
        },
        getMessage: function() {
          return currentMessages.danger;
        }
      }
    };
  }]).directive('flashMessages', ["flash", function(flash) {
      return {
        restrict: 'E',
        templateUrl: '/templates/flash/flash',
        link: function(scope, elem, attrs) {
          return scope.flash = flash;
        }
      };
    }]
  );
})();

(function(){
  angular
    .module('linguine')
    .factory('loggedIn', loggedIn);

  function loggedIn($q, $timeout, $http, $state, flash){
    return {
      loggedIn: function(){
        var deferred = $q.defer();
        $http.get('/api/logged_in').success(function(user){
          if (user.loggedIn){
            $timeout(deferred.resolve, 0);
          }
          else {
            flash.danger.setMessage('You need to be logged in to view that');
            $timeout(function(){deferred.reject();}, 0);
            $state.go('linguine.index');
          }
        });
      }
    };
  }
  loggedIn.$inject = ["$q", "$timeout", "$http", "$state", "flash"];
})();

(function(){
  angular
    .module('linguine')
    .controller('NavigationController', NavigationController);

  function NavigationController($scope, $http, $state, $rootScope, flash) {
    $scope.user = {}
    $scope.collapsed = true;
    $http.get('/api/logged_in')
      .success(function(data){
        if(data.loggedIn){
          $scope.loggedIn = true;
          $scope.currentUser = data.user;
        }else{
          $scope.loggedIn = false;
        }
      });

    $scope.login = function(){
      $http.post('/api/login', $scope.user)
        .success(function(data){
          $scope.currentUser = data.user;
          $scope.loggedIn = true;
          $scope.user = {};
        })
        .error(function (data){
          flash.danger.setMessage('Invalid username/password');
          $rootScope.$emit("event:angularFlash");
        });
    }

    $scope.logout = function() {
      $http.post('/api/logout')
        .success(function(data){
          $scope.currentUser = {};
          $scope.loggedIn = false;
          $state.go('linguine.index');
        })
    }

    $scope.formattedName = function() {
      if($scope.currentUser.name){
        return $scope.currentUser.name.split(' ')[0];
      }else{
        return $scope.currentUser.dce;
      }
    }

    $scope.isActive = function(loc) {
      return $state.includes(loc);
    }
  }
  NavigationController.$inject = ["$scope", "$http", "$state", "$rootScope", "flash"];
})();

(function(){

  angular
    .module('linguine.corpora')
    .controller('CorporaIndexController', CorporaIndexController);

  function CorporaIndexController ($scope, $http, $modal) {

    function onStartup() {
      refreshCorpora();
      refreshQuota();
    }

    onStartup();

    $scope.removeTag = function (corporaId, tagName) {
      $http
        .put('/api/corpora/' + corporaId + '/removeTag', {tagName: tagName})
        .success(function () {
          refreshCorpora();
        });
    }

    $scope.openPopup = function (corporaId) {

      var modalInstance = $modal.open({
        template:
          '<div class="modal-header">' + 
            '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>' + 
            '<h4 class="modal-title">Add Tag</h4>' + 
          '</div>' + 
          '<div class="modal-body">' + 
            '<input class="form-control" ng-model="tagName" placeholder="Tag name...">' +
          '</div>' + 
          '<div class="modal-footer">' +
            '<button class="btn btn-primary" ng-click="ok()">Add</button>' +
            '<button class="btn btn-default" ng-click="cancel()">Close</button>' +
          '</div>',
        controller: 'ModalInstanceCtrl',
        resolve: {
          corporaId: function () {
            return corporaId;
          }
        }
      });

      modalInstance.result.then(function (tagName, corporaId) {
        refreshCorpora();
      });

    };

    function refreshCorpora () {
      $http.get('/api/corpora')
      .success(function (data) {
        $scope.corpora = data;
      });
    }

    function refreshQuota () {
      $http.get('/api/corpora/quota')
      .success(function (data) {
        $scope.quota = data;
      });
    }

  }
  CorporaIndexController.$inject = ["$scope", "$http", "$modal"];
})();

(function(){

  angular
    .module('linguine.corpora')
    .controller('CorporaNewController', CorporaNewController);

  function CorporaNewController($scope, $upload, $state, $http) {

    $scope.corpus = {};
    $scope.files = [];

    $scope.onFileSelect = function ($files) {
      $scope.files = $files
    };

    $scope.upload = function () {
      if ( $scope.files && $scope.files.length) {
        for (var i = 0; i < $scope.files.length; i++) {
          var file = $scope.files[i];
          $upload
            .upload({
              url: 'api/corpora',
              data: $scope.corpus,
              file: file,
            })
            .progress(function (evt) {
              $scope.progress = parseInt( 100.0 * evt.loaded /evt. total );
            })
            .success(function(data){
              $state.go('linguine.corpora.index');
            })
        }
      }
    }


  }
  CorporaNewController.$inject = ["$scope", "$upload", "$state", "$http"];
})();

(function(){

  angular
    .module('linguine.corpora')
    .controller('CorporaShowController', CorporaShowController);

  function CorporaShowController ($scope, $http, $stateParams, $window, flash, $state, $rootScope) {

    $scope.back = function () {
      $window.history.back();
    };

    $scope.delete = function () {
      $http.delete('/api/corpora/' + $stateParams.id)
        .success(function (data) {
          $state.go('linguine.corpora.index')
        })
        .error(function (data) {
          flash.danger.setMessage("An error occured.");
          $rootScope.$emit("event:angularFlash");
        })
    };

    $http.get('/api/corpora/' + $stateParams.id)
      .success(function (data) {
        $scope.corpus = data;
      })
      .error(function (data) {
        flash.danger.setMessage("You need to be the owner of this corpus to view it");
        $state.go('linguine.corpora.index')
      });

  }
  CorporaShowController.$inject = ["$scope", "$http", "$stateParams", "$window", "flash", "$state", "$rootScope"];
})();

(function(){

  angular
    .module('linguine.corpora')
    .controller('ModalInstanceCtrl', ModalInstanceCtrl);

  function ModalInstanceCtrl ($scope, $http, $modalInstance, corporaId) {

    $scope.ok = function () {
      $http
        .put('/api/corpora/' + corporaId + '/addTag', {tagName: $scope.tagName})
        .success(function () {
          $modalInstance.close();
        });
    };

    $scope.cancel = function () {
      $modalInstance.dismiss('cancel');
    };

  }
  ModalInstanceCtrl.$inject = ["$scope", "$http", "$modalInstance", "corporaId"];;

})();

     (function(){

  angular
    .module('linguine.documentation')
    .controller('DocumentationAboutController', DocumentationAboutController);

  function DocumentationAboutController ($http, $scope, $state, $stateParams, $window) {
    $scope.back = function () {
      $window.history.back();
    };

  }
  DocumentationAboutController.$inject = ["$http", "$scope", "$state", "$stateParams", "$window"];
})();

(function(){

  angular
    .module('linguine.documentation', ['ui.router'])
    .config(config);

  function config($stateProvider){
    $stateProvider
      .state('linguine.documentation', {
        url: '/documentation',
        abstract: true,
        template: '<div ui-view />'
      })
      .state('linguine.documentation.index', {
        url: '',
        templateUrl: '/templates/documentation/index',
        controller: 'DocumentationIndexController',
      })
      .state('linguine.documentation.tutorial', {
        url: '/tutorial',
        templateUrl: '/templates/documentation/tutorial',
        controller: 'DocumentationTutorialController',
      })
      .state('linguine.documentation.about', {
        url: '/about',
        templateUrl: '/templates/documentation.about',
        controller: 'DocumentationAboutController',
      });
  }
  config.$inject = ["$stateProvider"];
})();

(function(){

  angular
    .module('linguine.documentation')
    .controller('DocumentationIndexController', DocumentationIndexController);

  function DocumentationIndexController ($scope, $http) {

  }
  DocumentationIndexController.$inject = ["$scope", "$http"];
})();

(function(){

  angular
    .module('linguine.documentation')
    .controller('DocumentationTutorialController', DocumentationTutorialController);

  function DocumentationTutorialController($http, $scope, $state) {
    $scope.back = function () {
      $window.history.back();
    };
  }
  DocumentationTutorialController.$inject = ["$http", "$scope", "$state"];
})();
